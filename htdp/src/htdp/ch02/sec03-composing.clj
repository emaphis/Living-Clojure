(ns htdp.ch02.sec03-composing
  (:require [htdp.util :refer :all]
            [clojure.repl :refer :all]
            [clojure.string :refer :all]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Composing Functions


;;; A batch program.

(defn opening [fst]
  (str "Dear " fst ","))

(defn body [fst lst]
  (str
   "We have discovered that all people with the" "\n"
   "last name " lst " have won our lottery. So, " "\n" 
   fst ",  " "hurry and pick up your prize."))

(defn closing [signature-name]
  (str
   "Sincerely,"
   "\n\n"
   signature-name
   "\n"))

(defn letter [fst lst signature-name]
  (str
   (opening fst)
   "\n\n"
   (body fst lst)
   "\n\n"
   (closing signature-name)))

;; (println (letter "Matthew" "Fisler" "Felleisen"))

;;(doc spit) ;; output text to a file.
;; (spit "letter.txt" (letter "Matthew" "Fisler" "Felleisen"))

;;; Example

;; The owner of a monopolistic movie theater in a small town has complete
;; freedom in setting ticket prices. The more he charges, the fewer people can
;; afford tickets. The less he charges, the more it costs to run a show because
;; attendance goes up. In a recent experiment the owner determined a
;; relationship between the price of a ticket and average attendance.

;; * At a price of $5.00 per ticket, 120 people attend a performance.
;; * For each 10-cent change in the ticket price, the average attendance changes
;;   by 15 people. That is, if the owner charges $5.10, some 105 people attend
;;   on the average;
;; * if the price goes down to $4.90, average attendance increases to 135.
;; Let's translate this idea into a mathematical formula:

;; avg_attendance = 120 people - ($(change price) / $0.10 * 15 people)

;; Unfortunately, the increased attendance also comes at an increased cost.
;; * Every performance comes at a fixed cost of $180 to the owner
;; * plus a variable cost of $0.04 per attendee.

;; The owner would like to know the exact relationship between profit and ticket
;; price in order to maximize the profit.

;; number of `attendees` depends on the `ticket-price`.
(defn attendees [ticket-price]
  (- 120 (* (- ticket-price 5.0) (/ 15 0.1))))

;; The `revenue` is exclusively generated by the sale of tickets, meaning
;; it is exactly the product of `ticket-price` and number of `attendees`:
(defn revenue [ticket-price]
  (* ticket-price (attendees ticket-price)))

;; The `cost` consists of two parts:
;;  * a fixed part ($180)
;;  * a variable part that depends on the number of `attendees`.
;; Given that the number of `attendees` is a function of the `ticket-price`,
;; a function for computing the cost of a show must also consume the
;; `ticket-price` so that it can reuse the `attendees` function: 
(defn cost [ticket-price]
  (+ 180.0 (* 0.04 (attendees ticket-price))))

;; `profit` is the difference between `revenue` and `cost` for some given
;; `ticket-price`:
(defn profit [ticket-price]
  (- (revenue ticket-price)
     (cost ticket-price)))


;; Ex 27.
;; Our solution to the sample problem contains several constants in the middle
;; of functions. As "One Program, Many Definitions" already points out, it is
;; best to give names to such constants so that future readers understand where
;; these numbers come from.
;; Change  magic numbers to refactor them into constant definitions. 

(def ATTENDEES 120)
(def PRICE 5.00)
(def INCREASE-ATTENDENCE 15)
(def INCREASED-PRICE 0.10)
(def FIXED-COST 180.00)
(def PRICE-PER-ATTENDEE 0.04)

(defn attendees [ticket-price]
  (- ATTENDEES (* (- ticket-price PRICE)
                  (/ INCREASE-ATTENDENCE INCREASED-PRICE))))

(defn revenue [ticket-price]
  (* ticket-price (attendees ticket-price)))

(defn cost [ticket-price]
  (+ FIXED-COST (* PRICE-PER-ATTENDEE
                   (attendees ticket-price))))

(defn profit [ticket-price]
  (- (revenue ticket-price)
     (cost ticket-price)))


;; Ex 27.
;; Determine the potential profit for these ticket prices: $1, $2, $3, $4,
;; and $5.
;; Which price maximizes the profit of the movie theater?
;; Determine the best ticket price to a dime.


(profit 1.0) ;; => 511.2
(profit 2.0) ;; => 937.2
(profit 3.0) ;; => 1063.2
(profit 4.0) ;; => 889.2
(profit 5.0) ;; => 415.2

;; Highest profit:
(profit 2.80) ;; => 1062.0
(profit 2.90) ;; => 1064.10
(profit 2.91) ;; => 1064.15
(profit 2.92) ;; => 1064.16 ; the highest profit.
(profit 2.93) ;; => 1064.15
(profit 3.00) ;; => 1063.2


(defn profit-2 [price]
  (- (* (+ 120
           (* (/ 15 0.1)
              (- 5.0 price)))
        price)
     (+ 180
        (* 0.04
           (+ 120
              (* (/ 15 0.1)
                 (- 5.0 price)))))))

(profit-2 1.0) ;; => 511.2
(profit-2 2.0) ;; => 937.2
(profit-2 3.0) ;; => 1063.2
(profit-2 4.0) ;; => 889.2
(profit-2 5.0) ;; => 415.2


;; Ex 29.
;;  After studying the costs of a show, the owner discovered several ways of
;; lowering the cost. As a result of these improvements, there is no longer
;; a fixed cost; a variable cost of $1.50 per attendee remains.


(def FIXED-COST-PER-ATTENDEE 1.50)
(def ATTENDEES 120)
(def PRICE 5.00)
(def INCREASE-ATTENDENCE 15)
(def INCREASED-PRICE 0.10)
(def PRICE-PER-ATTENDEE 0.04)

(defn attendees-3 [ticket-price]
  (- ATTENDEES (* (- ticket-price PRICE)
                  (/ INCREASE-ATTENDENCE INCREASED-PRICE))))

(defn revenue-3 [ticket-price]
  (* ticket-price (attendees-3 ticket-price)))

(defn cost-3 [ticket-price]
  (+ FIXED-COST-PER-ATTENDEE
     (attendees-3 ticket-price))))

(defn profit-3 [ticket-price]
  (- (revenue-3 ticket-price)
     (cost-3 ticket-price)))

(profit-3 1.0) ;; => -1.5
(profit-3 2.0) ;; => 568.5
